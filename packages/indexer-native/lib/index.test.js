const { NativeSignatureVerifier } = require('.')


describe('Signature verification', () => {
    test('Batch', async () => {
        let address = "0xc61127cdfb5380df4214b0200b9a07c7c49d34f9";
        let native = new NativeSignatureVerifier(address);

        // Taken from the indexer-service code matching
        // the Scalar format.
        let verifyReceipt = async (receipt) => {
            const message = receipt.slice(64, 136)
            const signature = receipt.slice(136, 266)
            return await native.verify(message, signature)
        }

        // Testing multiple true/false values in this order on the same NativeSignatureVerifier
        // instance is important because it verifies different paths for the cached/uncached internals.
        // These resolve in this order:
        //    False on uncached
        //    True on uncached
        //    True on cached
        //    False on cached
        // Values generated by Scalar test code
        let receipt0________ = "6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000001c7cb128b1f0c35ebcfda82da63fb149773d26a5665ae70db6c0c0f61e362d5320f18c77a0907fd6b1565e8734bd4f893d2a0c5dfd34878ee4bd634c99297db091c"
        let receipt0Tampered = "6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000001c7cb128b1f0c35ebcfda82da63fb149773d26a5665ae70db6c0c0f61e362d5320f18c77a0907fd6b1565e8734bd4f893d2a0c5dfd34878ee4bd634c99297db091b"
        let receipt1________ = "640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000259d1189ce128a2a3b4786035aed37cca0968c638c67e73ed1496a50fbda043d5553a7702bb8b0f71409dd0199533161e322b17826a91236cfb22504a093d0a451c"
        let receipt1Tampered = "640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000259d1189ce128a2a3b4786035aed37cca0968c638c67e73ed1496a50fbda043d5553a7702bb8b0f71409dd0199533161e322b17826a91236cfb22504a093d0a451b"
        // The awaits give time for each previous task to resolve, ensuring that the
        // fast path is taken for subsequent runs.
        await expect(verifyReceipt(receipt0Tampered)).resolves.toEqual(false)
        await expect(verifyReceipt(receipt0________)).resolves.toEqual(true)
        await expect(verifyReceipt(receipt1________)).resolves.toEqual(true)
        await expect(verifyReceipt(receipt1Tampered)).resolves.toEqual(false)
        // When running the tests locally with some debug information, to ensure
        // that the fast path was transitioned to it only printed 3/4 messages.
        // Adding this redundant test printed 4/5 messages. Assuming the problem
        // is just flushing output.
        await expect(verifyReceipt(receipt1Tampered)).resolves.toEqual(false)
    })
})